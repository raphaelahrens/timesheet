#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {}  # type: ignore


class TimeSheetBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(TimeSheetBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class TimeSheetParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=TimeSheetBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(TimeSheetParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa

        def block0():
            self._line_()
        self._closure(block0)
        self._check_eof()

    @tatsumasu()
    def _line_(self):  # noqa
        with self._choice():
            with self._option():
                self._unfinished_()
            with self._option():
                self._work_line_()
            with self._option():
                self._special_line_()
            with self._option():
                self._sum_line_()
            with self._option():
                self._balance_line_()
            self._error('no available options')

    @tatsumasu()
    def _special_line_(self):  # noqa
        self._weekday_()
        self.name_last_node('weekday')
        self._date_()
        self.name_last_node('date')
        self._string_()
        self.name_last_node('comment')
        with self._optional():
            self._token('|')
        self.ast._define(
            ['comment', 'date', 'weekday'],
            []
        )

    @tatsumasu()
    def _start_time_(self):  # noqa
        self._time_()
        self.name_last_node('start')
        self._token('--')
        self.ast._define(
            ['start'],
            []
        )

    @tatsumasu()
    def _time_span_(self):  # noqa
        self._time_()
        self.name_last_node('start')
        self._token('--')

        self._time_()
        self.name_last_node('end')
        self.ast._define(
            ['end', 'start'],
            []
        )

    @tatsumasu()
    def _opt_extra_(self):  # noqa
        self._diff_()
        self.name_last_node('total')
        self._token('=>')
        self._diff_()
        self.name_last_node('saldo')
        self.ast._define(
            ['saldo', 'total'],
            []
        )

    @tatsumasu()
    def _unfinished_(self):  # noqa
        self._weekday_()
        self.name_last_node('weekday')
        self._date_()
        self.name_last_node('date')

        def block3():
            self._time_span_()
        self._closure(block3)
        self.name_last_node('time_spans')
        self._time_()
        self.name_last_node('start')
        self._token('--')
        self.ast._define(
            ['date', 'start', 'time_spans', 'weekday'],
            []
        )

    @tatsumasu()
    def _sub_unfinished_(self):  # noqa
        self._time_()
        self.name_last_node('start')
        self._token('--')
        self.ast._define(
            ['start'],
            []
        )

    @tatsumasu()
    def _sp_unfinished_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._start_()
                    self.name_last_node('@')
                with self._option():
                    self._sub_unfinished_()
                    self.add_last_node_to_name('@')
                self._error('no available options')

    @tatsumasu()
    def _work_line_(self):  # noqa
        self._weekday_()
        self.name_last_node('weekday')
        self._date_()
        self.name_last_node('date')

        def block3():
            self._time_span_()
        self._positive_closure(block3)
        self.name_last_node('time_spans')
        with self._optional():
            self._token('|')
            self._token('(')
            self._diff_()
            self.name_last_node('pause')
            self._token(')')
            self._diff_()
            self.name_last_node('total')
            self._token('=>')
            self._diff_()
            self.name_last_node('saldo')
        self.ast._define(
            ['date', 'pause', 'saldo', 'time_spans', 'total', 'weekday'],
            []
        )

    @tatsumasu()
    def _sum_line_(self):  # noqa
        self._token('=>')
        self._diff_()
        self.name_last_node('total')
        self._token('-')
        self._diff_()
        self.name_last_node('breaks')
        self._token('-')
        self._diff_()
        self.name_last_node('soll')
        self._token('=')
        self._token('(')
        self._diff_()
        self.name_last_node('work')
        self._token(',')
        self._diff_()
        self.name_last_node('diff')
        self._token(')')
        self.ast._define(
            ['breaks', 'diff', 'soll', 'total', 'work'],
            []
        )

    @tatsumasu()
    def _balance_line_(self):  # noqa
        self._token('->')
        self._token('Balance')
        self._token('=')
        self._diff_()
        self.name_last_node('@')

    @tatsumasu()
    def _date_(self):  # noqa
        self._DD_()
        self.name_last_node('day')
        self._token('.')
        self._DD_()
        self.name_last_node('month')
        self._token('.')
        self._YEAR_()
        self.name_last_node('year')
        self.ast._define(
            ['day', 'month', 'year'],
            []
        )

    @tatsumasu()
    def _time_(self):  # noqa
        self._DD_()
        self.name_last_node('hour')
        self._token(':')
        self._DD_()
        self.name_last_node('minute')
        self.ast._define(
            ['hour', 'minute'],
            []
        )

    @tatsumasu()
    def _diff_(self):  # noqa
        self._SIGN_()
        self.name_last_node('sign')
        self._ND_()
        self.name_last_node('hours')
        self._token(':')
        self._DD_()
        self.name_last_node('minutes')
        self.ast._define(
            ['hours', 'minutes', 'sign'],
            []
        )

    @tatsumasu()
    def _DD_(self):  # noqa
        self._pattern(r'\d\d')

    @tatsumasu()
    def _YEAR_(self):  # noqa
        self._pattern(r'\d\d\d\d')

    @tatsumasu()
    def _ND_(self):  # noqa
        self._pattern(r'\d+')

    @tatsumasu()
    def _SIGN_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._token('-')
                with self._option():
                    self._constant('+')
                self._error('no available options')

    @tatsumasu()
    def _EOL_(self):  # noqa
        self._pattern(r'\n')

    @tatsumasu()
    def _weekday_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('Mon')
            with self._option():
                self._token('Tue')
            with self._option():
                self._token('Wed')
            with self._option():
                self._token('Thu')
            with self._option():
                self._token('Fri')
            with self._option():
                self._token('Sat')
            with self._option():
                self._token('Sun')
            self._error('no available options')

    @tatsumasu()
    def _string_(self):  # noqa
        self._pattern(r'"[^"]*"')


class TimeSheetSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def line(self, ast):  # noqa
        return ast

    def special_line(self, ast):  # noqa
        return ast

    def start_time(self, ast):  # noqa
        return ast

    def time_span(self, ast):  # noqa
        return ast

    def opt_extra(self, ast):  # noqa
        return ast

    def unfinished(self, ast):  # noqa
        return ast

    def sub_unfinished(self, ast):  # noqa
        return ast

    def sp_unfinished(self, ast):  # noqa
        return ast

    def work_line(self, ast):  # noqa
        return ast

    def sum_line(self, ast):  # noqa
        return ast

    def balance_line(self, ast):  # noqa
        return ast

    def date(self, ast):  # noqa
        return ast

    def time(self, ast):  # noqa
        return ast

    def diff(self, ast):  # noqa
        return ast

    def DD(self, ast):  # noqa
        return ast

    def YEAR(self, ast):  # noqa
        return ast

    def ND(self, ast):  # noqa
        return ast

    def SIGN(self, ast):  # noqa
        return ast

    def EOL(self, ast):  # noqa
        return ast

    def weekday(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = TimeSheetParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, TimeSheetParser, name='TimeSheet')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
